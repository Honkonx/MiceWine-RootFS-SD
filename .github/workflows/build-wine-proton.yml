# Nombre del Flujo de Trabajo: Compilar Wine (Proton) para un Rootfs tipo Micewine
name: Build Wine for Micewine Rootfs

on:
  workflow_dispatch:
    inputs:
      proton_branch:
        description: 'Rama o etiqueta de Wine/Proton a compilar'
        required: true
        default: 'proton_9.0'
        type: string
      optimization_level:
        description: 'Nivel de optimización del compilador'
        required: true
        default: 'O2'
        type: choice
        options:
        - O2
        - O3
        - Os

permissions:
  contents: write # Necesario para crear un Release en GitHub

env:
  BUILD_DIR: "/tmp/build_wine"
  INSTALL_DIR: "/tmp/wine-install"

jobs:
  build_wine:
    runs-on: ubuntu-22.04
    name: Compilar Wine para Rootfs

    steps:
    - name: 1. Configurar el entorno de compilación
      run: |
        echo "Rama de Proton seleccionada: ${{ github.event.inputs.proton_branch }}"
        echo "Nivel de optimización: ${{ github.event.inputs.optimization_level }}"
        echo "PROTON_BRANCH=${{ github.event.inputs.proton_branch }}" >> $GITHUB_ENV
        echo "OPT_LEVEL=${{ github.event.inputs.optimization_level }}" >> $GITHUB_ENV

    - name: 2. Instalar dependencias de compilación (Corregido)
      run: |
        sudo DEBIAN_FRONTEND=noninteractive
        sudo apt-get update
        sudo dpkg --add-architecture i386
        sudo apt-get update
        # Dependencias necesarias para compilar Wine.
        # - Se cambió libgnutls28-dev por libgnutls-dev para mayor compatibilidad.
        # - Se añadió libxxf86vm-dev que estaba en el script de referencia.
        # - Se aseguró que más paquetes sean multilib para una compilación WOW64 correcta.
        sudo apt-get install -y --install-recommends \
          build-essential git wget xz-utils perl autoconf flex bison \
          gcc-multilib g++-multilib mingw-w64 gettext \
          libx11-dev:i386 libx11-dev:amd64 \
          libxext-dev:i386 libxext-dev:amd64 \
          libxi-dev:i386 libxi-dev:amd64 \
          libxrandr-dev:i386 libxrandr-dev:amd64 \
          libxcursor-dev:i386 libxcursor-dev:amd64 \
          libxcomposite-dev:i386 libxcomposite-dev:amd64 \
          libxinerama-dev:i386 libxinerama-dev:amd64 \
          libxfixes-dev:i386 libxfixes-dev:amd64 \
          libxxf86vm-dev:i386 libxxf86vm-dev:amd64 \
          libpulse-dev:i386 libpulse-dev:amd64 \
          libfreetype6-dev:i386 libfreetype6-dev:amd64 \
          libgnutls-dev:i386 libgnutls-dev:amd64 \
          libgstreamer1.0-dev:i386 libgstreamer1.0-dev:amd64 \
          libgstreamer-plugins-base1.0-dev:i386 libgstreamer-plugins-base1.0-dev:amd64 \
          libglvnd-dev:i386 libglvnd-dev:amd64 \
          libvulkan-dev:i386 libvulkan-dev:amd64

    - name: 3. Descargar el código fuente de Wine/Proton
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        git clone https://github.com/ValveSoftware/wine.git
        cd wine
        git checkout ${{ env.PROTON_BRANCH }}
        echo "Clonado y posicionado en la rama ${{ env.PROTON_BRANCH }}"

    - name: 4. Compilar Wine (Proceso WOW64)
      run: |
        set -e # Salir si un comando falla
        cd ${{ env.BUILD_DIR }}/wine

        # Generar script de configuración
        ./autogen.sh

        # Configurar flags de optimización
        case "$OPT_LEVEL" in
          "O3") OPT_FLAGS="-O3 -pipe -ftree-vectorize -march=x86-64 -msse3 -mfpmath=sse" ;;
          "Os") OPT_FLAGS="-Os -pipe -march=x86-64 -msse3 -mfpmath=sse" ;;
          *)    OPT_FLAGS="-O2 -pipe -march=x86-64 -msse3 -mfpmath=sse" ;;
        esac

        export CFLAGS="$OPT_FLAGS"
        export CXXFLAGS="$OPT_FLAGS"
        export LDFLAGS="-Wl,-O1,--sort-common,--as-needed"

        # --- Etapa 1: Compilar las herramientas de Wine (wine-tools) ---
        echo "Iniciando compilación de wine-tools..."
        mkdir -p ../wine-tools
        cd ../wine-tools
        ../wine/configure --enable-win64 --without-x
        make -j$(nproc) tools

        # --- Etapa 2: Compilar Wine WOW64 usando las herramientas ---
        echo "Iniciando compilación de Wine WOW64..."
        mkdir -p ../wine-build
        cd ../wine-build

        # Argumentos de configuración basados en el script de Micewine
        ../wine/configure \
          --prefix=${{ env.INSTALL_DIR }} \
          --enable-archs=i386,x86_64 \
          --with-wine-tools=../wine-tools \
          --with-x \
          --with-pulse \
          --with-gstreamer \
          --with-opengl \
          --with-gnutls \
          --with-xinput \
          --with-xinput2 \
          --enable-nls \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-oss \
          --without-xshm \
          --without-xxf86vm \
          --without-osmesa \
          --without-usb \
          --without-sdl \
          --without-cups \
          --without-netapi \
          --without-pcap \
          --without-gphoto \
          --without-v4l2 \
          --without-pcsclite \
          --without-wayland \
          --without-opencl \
          --without-dbus \
          --without-sane \
          --without-udev \
          --without-capi

        # Compilar e instalar
        make -j$(nproc)
        make install

        # Obtener la versión para el nombre del paquete
        VERSION_WINE=$(cd ${{ env.BUILD_DIR }}/wine && git describe --tags --abbrev=0)
        COMMIT_HASH=$(cd ${{ env.BUILD_DIR }}/wine && git rev-parse --short HEAD)
        WINE_FULL_VERSION="${VERSION_WINE}-${COMMIT_HASH}"
        echo "WINE_VERSION=$WINE_FULL_VERSION" >> $GITHUB_ENV
        echo "Compilación de Wine $WINE_FULL_VERSION finalizada."

    - name: 5. Empaquetar la compilación
      run: |
        PACKAGE_NAME="wine-${{ env.WINE_VERSION }}-micewine-rootfs"
        echo "Creando el paquete: ${PACKAGE_NAME}.tar.xz"
        cd ${{ env.INSTALL_DIR }}
        tar -cJf /tmp/${PACKAGE_NAME}.tar.xz .
        echo "Paquete creado exitosamente."
        ls -lh /tmp/*.tar.xz

    - name: 6. Preparar artefactos para el Release
      id: set_release_info
      run: |
        CURRENT_DATE=$(date +%Y%m%d)
        RELEASE_TAG="wine-${{ env.WINE_VERSION }}-${CURRENT_DATE}"
        echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
        echo "Nombre del archivo: wine-${{ env.WINE_VERSION }}-micewine-rootfs.tar.xz"
        mv /tmp/wine-*.tar.xz ${{ github.workspace }}/

    - name: 7. Subir artefacto de compilación
      uses: actions/upload-artifact@v4
      with:
        name: wine-build-micewine
        path: ${{ github.workspace }}/wine-*.tar.xz
        retention-days: 5

    - name: 8. Crear Release en GitHub
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: "Wine Build para Micewine Rootfs - ${{ env.WINE_VERSION }}"
        body: |
          ## Compilación de Wine para Micewine Rootfs

          Esta es una compilación automatizada de Wine (basada en Proton) para ser usada en un rootfs como el de Micewine.

          - **Rama de Proton**: `${{ github.event.inputs.proton_branch }}`
          - **Versión completa**: `${{ env.WINE_VERSION }}`
          - **Nivel de optimización**: `${{ github.event.inputs.optimization_level }}`
          - **Arquitectura**: WOW64 (soporta aplicaciones de 32 y 64 bits)

          ### Para usar:
          1. Descarga el archivo `.tar.xz`.
          2. Extráelo en la raíz de tu sistema de archivos (o en el prefijo deseado).
             \`\`\`bash
             sudo tar -xJf wine-*.tar.xz -C /
             \`\`\`
        files: |
          ${{ github.workspace }}/wine-*.tar.xz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

