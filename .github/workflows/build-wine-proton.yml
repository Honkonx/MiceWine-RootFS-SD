name: Build Wine WOW64 for Micewine Rootfs

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Wine version number (e.g., 9.9, 9.21)'
        required: true
        default: '9.2'
        type: string

permissions:
  contents: write # Allow GITHUB_TOKEN to create a Release

jobs:
  build:
    runs-on: ubuntu-22.04 # Using Jammy as a base

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set version variables
      run: |
        echo "WINE_VERSION=${{ github.event.inputs.wine_version }}" >> $GITHUB_ENV
        echo "Building Wine version: ${{ github.event.inputs.wine_version }}"

    - name: Install host dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          debootstrap \
          binfmt-support \
          qemu-user-static \
          git \
          wget \
          xz-utils

    - name: Create Micewine-style rootfs
      run: |
        sudo debootstrap --arch=amd64 jammy ./micewine-rootfs http://archive.ubuntu.com/ubuntu/

    - name: Configure rootfs for build
      run: |
        # Configure apt sources to include universe, multiverse, etc.
        cat <<EOF | sudo tee ./micewine-rootfs/etc/apt/sources.list
        deb http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
        deb http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
        deb http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
        deb http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
        EOF
        
        # Copy DNS configuration to allow package downloads inside chroot
        sudo cp /etc/resolv.conf ./micewine-rootfs/etc/resolv.conf

    - name: Clone Wine source code
      run: |
        # We clone it here to copy it into the rootfs later
        git clone https://github.com/brunodev85/wine-9.2-custom.git
        # You can checkout a specific tag if needed, e.g.:
        # cd wine-9.2-custom && git checkout wine-${{ env.WINE_VERSION }}

    - name: Prepare build script for rootfs
      shell: bash
      run: |
        # This script will run inside the chroot environment
        cat <<'EOF' > build_in_chroot.sh
        #!/bin/bash
        set -ex # Exit on error and print commands

        # --- Environment Setup ---
        export DEBIAN_FRONTEND=noninteractive
        export LANG=C.UTF-8
        export LC_ALL=C.UTF-8

        # --- Install Dependencies ---
        echo ">>> Installing build dependencies inside rootfs..."
        apt-get update
        apt-get install -y --no-install-recommends \
          build-essential \
          gcc-multilib \
          g++-multilib \
          mingw-w64 \
          flex \
          bison \
          git \
          gettext \
          libgettextpo-dev \
          locales \
          # Dependencies from micewine's build.sh
          libx11-dev \
          libxext-dev \
          libxcomposite-dev \
          libxrender-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxxf86vm-dev \
          libxinerama-dev \
          libxfixes-dev \
          libxi-dev \
          libvulkan-dev \
          libgl1-mesa-dev \
          libpulse-dev \
          libfreetype6-dev \
          libgnutls28-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly

        # --- Configure and Build Wine ---
        echo ">>> Starting Wine WOW64 build..."
        cd /wine_source

        mkdir -p build-wow64
        cd build-wow64

        # Configure WOW64 Wine for Micewine
        # Flags are based on your build.sh and the original workflow
        ../configure \
          --prefix=/opt/wine \
          --enable-archs=i386,x86_64 \
          --enable-nls \
          --disable-win16 \
          --disable-winemenubuilder \
          --disable-tests \
          --with-x \
          --with-gstreamer \
          --with-pulse \
          --with-vulkan \
          --with-opengl \
          --with-gnutls \
          --without-oss \
          --without-xshm \
          --without-osmesa \
          --without-usb \
          --without-sdl \
          --without-cups \
          --without-netapi \
          --without-pcap \
          --without-gphoto \
          --without-v4l2 \
          --without-pcsclite \
          --without-wayland \
          --without-opencl \
          --without-dbus \
          --without-sane \
          --without-udev \
          --without-capi

        # Build Wine
        make -j$(nproc)

        # --- Install Wine ---
        echo ">>> Installing Wine to /opt/wine..."
        make install

        echo ">>> Build and installation complete."
        EOF

        chmod +x build_in_chroot.sh

    - name: Run build inside rootfs
      run: |
        sudo cp -r ./wine-9.2-custom ./micewine-rootfs/wine_source
        sudo cp ./build_in_chroot.sh ./micewine-rootfs/build_in_chroot.sh

        # Execute the build script within the chroot
        sudo chroot ./micewine-rootfs /build_in_chroot.sh

    - name: Package the result
      run: |
        mkdir -p wine-package
        # Copy the final installation from the rootfs to the host for packaging
        sudo cp -r ./micewine-rootfs/opt/wine ./wine-package/
        
        # Package into a tarball
        tar -czf wine-${{ env.WINE_VERSION }}-wow64-micewine-rootfs.tar.gz -C wine-package .
        echo "Packaging complete:"
        ls -lh wine-*.tar.gz

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.WINE_VERSION }}-wow64-micewine-rootfs
        path: wine-*.tar.gz

    - name: Release to GitHub
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.WINE_VERSION }}-wow64-micewine
        name: Wine ${{ env.WINE_VERSION }} (WOW64 for Micewine Rootfs)
        body: |
          # Wine ${{ env.WINE_VERSION }} - WOW64 for Micewine-style Rootfs
          
          - **Wine Version**: ${{ env.WINE_VERSION }}
          - **Architecture**: WOW64 (supports 32-bit and 64-bit Windows apps)
          - **Target**: Micewine Rootfs
          - **Graphics API**: Vulkan enabled
          - **Multimedia**: GStreamer enabled
        files: wine-*.tar.gz

